let _nya_cxfact_g = 5.0;
let _nya_cxfact_epsilon = 1e-7;

fn _nya_cxfact_drop_imag(z: Complex) -> Complex {
  if abs(z.y) <= _nya_cxfact_epsilon {
    z.y = 0.0;
  }
  return z;
}

fn _nya_helper_cx_factorial_pos(z: Complex) -> Complex {
  let x = 1.0000018972739440364 + 76.180082222642137322 / (z + 1.0)
    - 86.505092037054859197 / (z + 2.0)
    + 24.0128985819226859 / (z + 3.0)
    - 1.2296028490285820771 / (z + 4.0);

  let t = z + _nya_cxfact_g + 0.5;
  let y = 2.5066282746310007 * t(z + 0.5);
  // 2.5066282746310007 = sqrt(2π)
  y = _helper_mul_c32(y, _helper_exp(-t));
  y = _helper_mul_c32(y, x);
  return y;
}

fn _nya_helper_factorial(z: Complex) -> Complex {
  if z.x < 1.5 {
    // G(z) = (z-1)!
    // G(z)G(1-z) = π/sin(πz)
    // (z-1)! (1-z-1)! = π/sin(πz)
    // u = z-1
    // u! (-u-1)! = π/sin(πz)
    // u! = π/sin(πz)/(-u-1)!
    // u! = π/(sin(πz)*(-u-1)!)
    let res = -_nya_helper_cx_factorial_pos(-z - vec2(1, 0));
    let sinArg = 3.141592653589793 * z;
    let sinVal = vec2(
      sin(sinArg.x) * cosh(sinArg.y),
      cos(sinArg.x) * sinh(sinArg.y),
    );
    _helper_div(vec2(3.141592653589793, 0), _helper_mul_c32(sinVal, res))
  } else {
    _nya_helper_cx_factorial_pos(z)
  }
}

fn nya_gamma(z: Complex) -> Complex {
  _nya_helper_factorial(z - vec2(1, 0))
}
