use "color/dcg";

struct Point {
  x: num,
  y: num,
}

fn %point(x: num, y: num) -> Point {
  Point { x, y }
}

fn %display(a: Point) -> latex {
  display"(${a.x},${a.y})"
}

fn +(a: Point) -> Point {
  a
}

fn +(a: Point, b: Point) -> Point {
  a @+ b
}

fn -(a: Point) -> Point {
  @-a
}

fn -(a: Point, b: Point) -> Point {
  a @- b
}

fn *(a: num, b: Point) -> Point {
  a @* b
}

fn *(a: Point, b: num) -> Point {
  a @* b
}

fn /(a: Point, b: num) -> Point {
  a @/ b
}

fn ==(a: Point, b: Point) -> bool {
  a.x == b.x && a.y == b.y
}

fn !=(a: Point, b: Point) -> bool {
  !(a.x == b.x && a.y == b.y)
}

fn unsign(z: Point) -> Point {
  @abs(z)
}

fn %dot(a: Point, b: Point) -> num {
  @dot(a, b)
}

fn %odot(a: Point, b: Point) -> Point {
  a @* b
}

fn point(a: Point) -> Point {
  a
}

fn %abs(a: Point) -> num {
  @length(a)
}

fn %plot(cv: Canvas, p: Point) -> CanvasPoint {
  // purple, full opacity 1.0
  cv.point_at(p.x, p.y)
}

// TODO: debugpoint, screendistance, point

expose package {
  name: "2D points",
  default: true,
}
