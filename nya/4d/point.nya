struct Point4D {
  x: num,
  y: num,
  z: num,
  w: num,
}

fn %point(x: num, y: num, z: num, w: num) -> Point4D {
  Point4D { x, y, z, w }
}

fn %display(a: Point4D) -> latex {
  display"(${a.x},${a.y},${a.z},${a.w})"
}

fn +(a: Point4D, b: Point4D) -> Point4D {
  a @+ b
}

fn -(a: Point4D, b: Point4D) -> Point4D {
  a @- b
}

fn unsign(a: Point4D) -> Point4D {
  @abs(a)
}

fn abs(a: Point4D) -> num {
  @length(a)
}

fn -(a: Point4D) -> Point4D {
  @-a
}

fn %odot(a: Point4D, b: Point4D) -> Point4D {
  a @* b
}

fn +(a: Point4D) -> Point4D {
  a
}

fn *(a: Point4D, b: num) -> Point4D {
  a @* b
}

fn *(a: num, b: Point4D) -> Point4D {
  a @* b
}

fn /(a: Point4D, b: num) -> Point4D {
  a @/ b
}

fn point(a: Point4D) -> Point4D {
  a
}

fn %dot(a: Point4D, b: Point4D) -> num {
  @dot(a, b)
}

expose package {
  name: "4D points",
  default: true,
}
