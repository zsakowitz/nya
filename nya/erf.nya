// /*! Adapted from @stdlib/math/base/special/erf */

fn _erf_polyPP(x: num) -> num {
  -0.3250421072470015
    + x
      * (
        -0.02848174957559851
          + x * (-0.005770270296489442 + x * -0.000023763016656650163)
      )
}

fn _erf_polyQQ(x: num) -> num {
  0.39791722395915535
    + x
      * (
        0.0650222499887673
          + x
            * (
              0.005081306281875766
                + x * (0.00013249473800432164 + x * -0.000003960228278775368)
            )
      )
}

fn _erf_polyPA(x: num) -> num {
  0.41485611868374833
    + x
      * (
        -0.3722078760357013
          + x
            * (
              0.31834661990116175
                + x
                  * (
                    -0.11089469428239668
                      + x * (0.035478304325618236 + x * -0.002166375594868791)
                  )
            )
      )
}

fn _erf_polyQA(x: num) -> num {
  0.10642088040084423
    + x
      * (
        0.540397917702171
          + x
            * (
              0.07182865441419627
                + x
                  * (
                    0.12617121980876164
                      + x * (0.01363708391202905 + x * 0.011984499846799107)
                  )
            )
      )
}

fn _erf_polyRA(x: num) -> num {
  -0.6938585727071818
    + x
      * (
        -10.558626225323291
          + x
            * (
              -62.375332450326006
                + x
                  * (
                    -162.39666946257347
                      + x
                        * (
                          -184.60509290671104
                            + x * (-81.2874355063066 + x * -9.814329344169145)
                        )
                  )
            )
      )
}

fn _erf_polySA(x: num) -> num {
  19.651271667439257
    + x
      * (
        137.65775414351904
          + x
            * (
              434.56587747522923
                + x
                  * (
                    645.3872717332679
                      + x
                        * (
                          429.00814002756783
                            + x
                              * (
                                108.63500554177944
                                  + x
                                    * (
                                      6.570249770319282
                                        + x * -0.0604244152148581
                                    )
                              )
                        )
                  )
            )
      )
}

fn _erf_polyRB(x: num) -> num {
  -0.799283237680523
    + x
      * (
        -17.757954917754752
          + x
            * (
              -160.63638485582192
                + x
                  * (
                    -637.5664433683896
                      + x * (-1025.0951316110772 + x * -483.5191916086514)
                  )
            )
      )
}

fn _erf_polySB(x: num) -> num {
  30.33806074348246
    + x
      * (
        325.7925129965739
          + x
            * (
              1536.729586084437
                + x
                  * (
                    3199.8582195085955
                      + x
                        * (
                          2553.0504064331644
                            + x * (474.52854120695537 + x * -22.44095244658582)
                        )
                  )
            )
      )
}

// TODO: these are just zero
let _erf_TINY = 1.0e-300;
let _erf_VERY_TINY = 2.848094538889218e-306;

let _erf_SMALL = 3.725290298461914e-9;

let _erf_ERX = 8.45062911510467529297e-1;

let _erf_EFX = 1.28379167095512586316e-1;
let _erf_EFX8 = 1.02703333676410069053;

let _erf_PPC = 1.28379167095512558561e-1;
let _erf_QQC = 1.0;

let _erf_PAC = -2.36211856075265944077e-3;
let _erf_QAC = 1.0;

let _erf_RAC = -9.86494403484714822705e-3;
let _erf_SAC = 1.0;

let _erf_RBC = -9.86494292470009928597e-3;
let _erfSBC = 1.0;

fn erf(x: num) -> num {
  let mut sign = false;
  let mut ax = 0.0;
  let mut z = 0.0;
  let mut r = 0.0;
  let mut s = 0.0;
  let mut y = 0.0;
  let mut p = 0.0;
  let mut q = 0.0;
  if is_nan(x) {
    return nan;
  }
  // Special case: +infinity
  if x == inf {
    return 1.0;
  }
  // Special case: -infinity
  if x == -inf {
    return -1.0;
  }
  // Special case: +-0
  if x == 0.0 {
    return x;
  }
  if x < 0.0 {
    sign = true;
    ax = -x;
  } else {
    sign = false;
    ax = x;
  }
  // |x| < 0.84375
  if ax < 0.84375 {
    if ax < _erf_SMALL {
      if ax < _erf_VERY_TINY {
        // Avoid underflow:
        return 0.125 * (8.0 * x + _erf_EFX8 * x);
      }
      return x + _erf_EFX * x;
    }
    z = x * x;
    r = _erf_PPC + z * _erf_polyPP(z);
    s = _erf_QQC + z * _erf_polyQQ(z);
    y = r / s;
    return x + x * y;
  }
  // 0.84375 <= |x| < 1.25
  if ax < 1.25 {
    s = ax - 1.0;
    p = _erf_PAC + s * _erf_polyPA(s);
    q = _erf_QAC + s * _erf_polyQA(s);
    return if sign { -_erf_ERX - p / q } else { _erf_ERX + p / q };
  }
  // +inf > |x| >= 6
  if ax >= 6.0 {
    return if sign { _erf_TINY - 1.0 } else { 1.0 - _erf_TINY };
    // raise inexact
  }
  s = 1.0 / (ax * ax);

  // |x| < 1/0.35 ~ 2.857143
  if ax < 2.857142857142857 {
    r = _erf_RAC + s * _erf_polyRA(s);
    s = _erf_SAC + s * _erf_polySA(s);
  } else {
    // |x| >= 1/0.35 ~ 2.857143
    r = _erf_RBC + s * _erf_polyRB(s);
    s = _erfSBC + s * _erf_polySB(s);
  }
  z = ax;
  // setLowWord(ax, 0); // pseudo-single (20-bit) precision x
  r = exp(-(z * z) - 0.5625) * exp((z - ax) * (z + ax) + r / s);
  if sign {
    r / ax - 1.0
  } else {
    1.0 - r / ax
  }
}

// /*! From @stdlib/math/base/special/erfinv */

fn _erfinvR1(x: num) -> num {
  let mut ax = 0.0;
  let mut s1 = 0.0;
  let mut s2 = 0.0;
  let mut x = x;
  if x == 0.0 {
    return -0.0005087819496582806;
  }
  if x < 0.0 {
    ax = -x;
  } else {
    ax = x;
  }
  if ax <= 1.0 {
    s1
      = -0.0005087819496582806
        + x
          * (
            -0.008368748197417368
              + x
                * (
                  0.03348066254097446
                    + x
                      * (
                        -0.012692614766297404
                          + x
                            * (
                              -0.03656379714117627
                                + x
                                  * (
                                    0.02198786811111689
                                      + x
                                        * (
                                          0.008226878746769157
                                            + x
                                              * (
                                                -0.005387729650712429
                                                  + x * (0.0 + x * 0.0)
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 1.0
        + x
          * (
            -0.9700050433032906
              + x
                * (
                  -1.5657455823417585
                    + x
                      * (
                        1.5622155839842302
                          + x
                            * (
                              0.662328840472003
                                + x
                                  * (
                                    -0.7122890234154284
                                      + x
                                        * (
                                          -0.05273963823400997
                                            + x
                                              * (
                                                0.07952836873415717
                                                  + x
                                                    * (
                                                      -0.0023339375937419
                                                        + x
                                                          * 0.0008862163904564247
                                                    )
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
  } else {
    x = 1.0 / x;
    s1
      = 0.0
        + x
          * (
            0.0
              + x
                * (
                  -0.005387729650712429
                    + x
                      * (
                        0.008226878746769157
                          + x
                            * (
                              0.02198786811111689
                                + x
                                  * (
                                    -0.03656379714117627
                                      + x
                                        * (
                                          -0.012692614766297404
                                            + x
                                              * (
                                                0.03348066254097446
                                                  + x
                                                    * (
                                                      -0.008368748197417368
                                                        + x
                                                          * (-
                                                              (
                                                                0.0005087819496582806
                                                              )
                                                          )
                                                    )
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 0.0008862163904564247
        + x
          * (
            -0.0023339375937419
              + x
                * (
                  0.07952836873415717
                    + x
                      * (
                        -0.05273963823400997
                          + x
                            * (
                              -0.7122890234154284
                                + x
                                  * (
                                    0.662328840472003
                                      + x
                                        * (
                                          1.5622155839842302
                                            + x
                                              * (
                                                -1.5657455823417585
                                                  + x
                                                    * (
                                                      -0.9700050433032906
                                                        + x * 1.0
                                                    )
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
  }
  s1 / s2
}

fn _erfinvR2(x: num) -> num {
  let mut ax = 0.0;
  let mut s1 = 0.0;
  let mut s2 = 0.0;
  let mut x = x;
  if x == 0.0 {
    return -0.20243350835593876;
  }
  if x < 0.0 {
    ax = -x;
  } else {
    ax = x;
  }
  if ax <= 1.0 {
    s1
      = -0.20243350835593876
        + x
          * (
            0.10526468069939171
              + x
                * (
                  8.3705032834312
                    + x
                      * (
                        17.644729840837403
                          + x
                            * (
                              -18.851064805871424
                                + x
                                  * (
                                    -44.6382324441787
                                      + x
                                        * (
                                          17.445385985570866
                                            + x
                                              * (
                                                21.12946554483405
                                                  + x * -3.6719225470772936
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 1.0
        + x
          * (
            6.242641248542475
              + x
                * (
                  3.971343795334387
                    + x
                      * (
                        -28.66081804998
                          + x
                            * (
                              -20.14326346804852
                                + x
                                  * (
                                    48.560921310873994
                                      + x
                                        * (
                                          10.826866735546016
                                            + x
                                              * (
                                                -22.643693341313973
                                                  + x * 1.7211476576120028
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
  } else {
    x = 1.0 / x;
    s1
      = -3.6719225470772936
        + x
          * (
            21.12946554483405
              + x
                * (
                  17.445385985570866
                    + x
                      * (
                        -44.6382324441787
                          + x
                            * (
                              -18.851064805871424
                                + x
                                  * (
                                    17.644729840837403
                                      + x
                                        * (
                                          8.3705032834312
                                            + x
                                              * (
                                                0.10526468069939171
                                                  + x * -0.20243350835593876
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 1.7211476576120028
        + x
          * (
            -22.643693341313973
              + x
                * (
                  10.826866735546016
                    + x
                      * (
                        48.560921310873994
                          + x
                            * (
                              -20.14326346804852
                                + x
                                  * (
                                    -28.66081804998
                                      + x
                                        * (
                                          3.971343795334387
                                            + x * (6.242641248542475 + x * 1.0)
                                        )
                                  )
                            )
                      )
                )
          );
  }
  s1 / s2
}

fn _erfinvR3(x: num) -> num {
  let mut ax = 0.0;
  let mut s1 = 0.0;
  let mut s2 = 0.0;
  let mut x = x;
  if x == 0.0 {
    return -0.1311027816799519;
  }
  if x < 0.0 {
    ax = -x;
  } else {
    ax = x;
  }
  if ax <= 1.0 {
    s1
      = -0.1311027816799519
        + x
          * (
            -0.16379404719331705
              + x
                * (
                  0.11703015634199525
                    + x
                      * (
                        0.38707973897260434
                          + x
                            * (
                              0.3377855389120359
                                + x
                                  * (
                                    0.14286953440815717
                                      + x
                                        * (
                                          0.029015791000532906
                                            + x
                                              * (
                                                0.0021455899538880526
                                                  + x
                                                    * (
                                                      -6.794655751811263e-7
                                                        + x
                                                          * (
                                                            2.8522533178221704e-8
                                                              + x
                                                                * (-
                                                                    (
                                                                      6.81149956853777e-10
                                                                    )
                                                                )
                                                          )
                                                    )
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 1.0
        + x
          * (
            3.4662540724256723
              + x
                * (
                  5.381683457070069
                    + x
                      * (
                        4.778465929458438
                          + x
                            * (
                              2.5930192162362027
                                + x
                                  * (
                                    0.848854343457902
                                      + x
                                        * (
                                          0.15226433829533179
                                            + x
                                              * (
                                                0.011059242293464892
                                                  + x
                                                    * (
                                                      0.0 + x * (0.0 + x * 0.0)
                                                    )
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
  } else {
    x = 1.0 / x;
    s1
      = -6.81149956853777e-10
        + x
          * (
            2.8522533178221704e-8
              + x
                * (
                  -6.794655751811263e-7
                    + x
                      * (
                        0.0021455899538880526
                          + x
                            * (
                              0.029015791000532906
                                + x
                                  * (
                                    0.14286953440815717
                                      + x
                                        * (
                                          0.3377855389120359
                                            + x
                                              * (
                                                0.38707973897260434
                                                  + x
                                                    * (
                                                      0.11703015634199525
                                                        + x
                                                          * (
                                                            -0.16379404719331705
                                                              + x
                                                                * (-
                                                                    (
                                                                      0.1311027816799519
                                                                    )
                                                                )
                                                          )
                                                    )
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 0.0
        + x
          * (
            0.0
              + x
                * (
                  0.0
                    + x
                      * (
                        0.011059242293464892
                          + x
                            * (
                              0.15226433829533179
                                + x
                                  * (
                                    0.848854343457902
                                      + x
                                        * (
                                          2.5930192162362027
                                            + x
                                              * (
                                                4.778465929458438
                                                  + x
                                                    * (
                                                      5.381683457070069
                                                        + x
                                                          * (
                                                            3.4662540724256723
                                                              + x * 1.0
                                                          )
                                                    )
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
  }
  s1 / s2
}

fn _erfinvR4(x: num) -> num {
  let mut ax = 0.0;
  let mut s1 = 0.0;
  let mut s2 = 0.0;
  let mut x = x;
  if x == 0.0 {
    return -0.0350353787183178;
  }
  if x < 0.0 {
    ax = -x;
  } else {
    ax = x;
  }
  if ax <= 1.0 {
    s1
      = -0.0350353787183178
        + x
          * (
            -0.0022242652921344794
              + x
                * (
                  0.018557330651423107
                    + x
                      * (
                        0.009508047013259196
                          + x
                            * (
                              0.0018712349281955923
                                + x
                                  * (
                                    0.00015754461742496055
                                      + x
                                        * (
                                          0.00000460469890584318
                                            + x
                                              * (
                                                -2.304047769118826e-10
                                                  + x * 2.6633922742578204e-12
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 1.0
        + x
          * (
            1.3653349817554064
              + x
                * (
                  0.7620591645536234
                    + x
                      * (
                        0.22009110576413124
                          + x
                            * (
                              0.03415891436709477
                                + x
                                  * (
                                    0.00263861676657016
                                      + x
                                        * (
                                          0.00007646752923027944
                                            + x * (0.0 + x * 0.0)
                                        )
                                  )
                            )
                      )
                )
          );
  } else {
    x = 1.0 / x;
    s1
      = 2.6633922742578204e-12
        + x
          * (
            -2.304047769118826e-10
              + x
                * (
                  0.00000460469890584318
                    + x
                      * (
                        0.00015754461742496055
                          + x
                            * (
                              0.0018712349281955923
                                + x
                                  * (
                                    0.009508047013259196
                                      + x
                                        * (
                                          0.018557330651423107
                                            + x
                                              * (
                                                -0.0022242652921344794
                                                  + x * -0.0350353787183178
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 0.0
        + x
          * (
            0.0
              + x
                * (
                  0.00007646752923027944
                    + x
                      * (
                        0.00263861676657016
                          + x
                            * (
                              0.03415891436709477
                                + x
                                  * (
                                    0.22009110576413124
                                      + x
                                        * (
                                          0.7620591645536234
                                            + x * (1.3653349817554064 + x * 1.0)
                                        )
                                  )
                            )
                      )
                )
          );
  }
  s1 / s2
}

fn _erfinvR5(x: num) -> num {
  let mut ax = 0.0;
  let mut s1 = 0.0;
  let mut s2 = 0.0;
  let mut x = x;
  if x == 0.0 {
    return -0.016743100507663373;
  }
  if x < 0.0 {
    ax = -x;
  } else {
    ax = x;
  }
  if ax <= 1.0 {
    s1
      = -0.016743100507663373
        + x
          * (
            -0.0011295143874558028
              + x
                * (
                  0.001056288621524929
                    + x
                      * (
                        0.00020938631748758808
                          + x
                            * (
                              0.000014962478375834237
                                + x
                                  * (
                                    4.4969678992770644e-7
                                      + x
                                        * (
                                          4.625961635228786e-9
                                            + x
                                              * (
                                                -2.811287356288318e-14
                                                  + x * 9.905570997331033e-17
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 1.0
        + x
          * (
            0.5914293448864175
              + x
                * (
                  0.1381518657490833
                    + x
                      * (
                        0.016074608709367652
                          + x
                            * (
                              0.0009640118070051656
                                + x
                                  * (
                                    0.000027533547476472603
                                      + x
                                        * (
                                          2.82243172016108e-7
                                            + x * (0.0 + x * 0.0)
                                        )
                                  )
                            )
                      )
                )
          );
  } else {
    x = 1.0 / x;
    s1
      = 9.905570997331033e-17
        + x
          * (
            -2.811287356288318e-14
              + x
                * (
                  4.625961635228786e-9
                    + x
                      * (
                        4.4969678992770644e-7
                          + x
                            * (
                              0.000014962478375834237
                                + x
                                  * (
                                    0.00020938631748758808
                                      + x
                                        * (
                                          0.001056288621524929
                                            + x
                                              * (
                                                -0.0011295143874558028
                                                  + x * -0.016743100507663373
                                              )
                                        )
                                  )
                            )
                      )
                )
          );
    s2
      = 0.0
        + x
          * (
            0.0
              + x
                * (
                  2.82243172016108e-7
                    + x
                      * (
                        0.000027533547476472603
                          + x
                            * (
                              0.0009640118070051656
                                + x
                                  * (
                                    0.016074608709367652
                                      + x
                                        * (
                                          0.1381518657490833
                                            + x * (0.5914293448864175 + x * 1.0)
                                        )
                                  )
                            )
                      )
                )
          );
  }
  s1 / s2
}

let _erfinvY1 = 8.91314744949340820313e-2;
let _erfinvY2 = 2.249481201171875;
let _erfinvY3 = 8.07220458984375e-1;
let _erfinvY4 = 9.3995571136474609375e-1;
let _erfinvY5 = 9.8362827301025390625e-1;

fn erf_inv(x: num) -> num {
  let mut sign = 0.0;
  let mut ax = 0.0;
  let mut qs = 0.0;
  let mut q = 0.0;
  let mut g = 0.0;
  let mut r = 0.0;

  // Special case: NaN
  if is_nan(x) {
    return nan;
  }
  // Special case: 1
  if x == 1.0 {
    return inf;
  }
  // Special case: -1
  if x == -1.0 {
    return -inf;
  }
  // Special case: +-0
  if x == 0.0 {
    return x;
  }
  // Special case: |x| > 1 (range error)
  if x > 1.0 || x < -1.0 {
    return nan;
  }

  // Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.
  if x < 0.0 {
    sign = -1.0;
    ax = -x;
  } else {
    sign = 1.0;
    ax = x;
  }
  q = 1.0 - ax;

  // |x| <= 0.5
  if ax <= 0.5 {
    g = ax * (ax + 10.0);
    r = _erfinvR1(ax);
    return sign * (g * _erfinvY1 + g * r);
  }
  // 1-|x| >= 0.25
  if q >= 0.25 {
    g = sqrt(-2.0 * ln(q));
    q -= 0.25;
    r = _erfinvR2(q);
    return sign * (g / (_erfinvY2 + r));
  }
  q = sqrt(-ln(q));

  // q < 3
  if q < 3.0 {
    qs = q - 1.125;
    r = _erfinvR3(qs);
    return sign * (_erfinvY3 * q + r * q);
  }
  // q < 6
  if q < 6.0 {
    qs = q - 3.0;
    r = _erfinvR4(qs);
    return sign * (_erfinvY4 * q + r * q);
  }
  // q < 18
  qs = q - 6.0;
  r = _erfinvR5(qs);
  sign * (_erfinvY5 * q + r * q)
}
