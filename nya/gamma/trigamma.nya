fn rateval12(x: num) -> num {
  if x == 0.0 {
    return -0.9999999999999991;
  }
  let ax = abs(x);
  if ax <= 1.0 {
    let s1 = -0.9999999999999991 + x * (-4.712373111208652 + x * (-7.94125711970499 + x * (-5.746577466976647 + x * (-0.4042133494563989 + x * (2.4787778117864288 + x * (2.0771415170245513 + x * (0.8588778991623601 + x * (0.20499222604410033 + x * (0.027210314034819473 + x * 0.001576484902087695)))))))));
    let s2 = 1.0 + x * (4.712373111208634 + x * (9.586191186553398 + x * (11.094006726982938 + x * (8.090754247493278 + x * (3.877058901598914 + x * (1.2275867870191448 + x * (0.249092040606385 + x * (0.02957504139006556 + x * (0.0015764849020049815 + x * 1.6126405034405948e-15)))))))));
    s1 / s2
  } else {
    let x = 1.0 / x;
    let s1 = 0.001576484902087695 + x * (0.027210314034819473 + x * (0.20499222604410033 + x * (0.8588778991623601 + x * (2.0771415170245513 + x * (2.4787778117864288 + x * (-0.4042133494563989 + x * (-5.746577466976647 + x * (-7.94125711970499 + x * (-4.712373111208652 + x * -0.9999999999999991)))))))));
    let s2 = 1.6126405034405948e-15 + x * (0.0015764849020049815 + x * (0.02957504139006556 + x * (0.249092040606385 + x * (1.2275867870191448 + x * (3.877058901598914 + x * (8.090754247493278 + x * (11.094006726982938 + x * (9.586191186553398 + x * (4.712373111208634 + x * 1.0)))))))));
    s1 / s2
  }
}

fn rateval24(x: num) -> num {
  if x == 0.0 {
    return -2.5584373473990794;
  }
  let ax = abs(x);
  if ax <= 1.0 {
    let s1 = -2.5584373473990794 + x * (-12.283020824054201 + x * (-23.9195022162768 + x * (-24.925643150482347 + x * (-14.797912276547878 + x * (-4.466544539286106 + x * (-0.01914390334056497 + x * (0.5154120525543513 + x * (0.1953783487860643 + x * (0.03347612826241743 + x * (0.0023736652059422065 + x * 0.0))))))))));
    let s2 = 1.0 + x * (4.800985584544199 + x * (9.992207278431701 + x * (11.889614616763133 + x * (8.966132566838091 + x * (4.4725413614962415 + x * (1.4860098202819654 + x * (0.31957073576676426 + x * (0.040735834578768094 + x * (0.0023736652059327163 + x * (2.3955488790352614e-16 + x * -2.9474924474061867e-18))))))))));
    s1 / s2
  } else {
    let x = 1.0 / x;
    let s1 = 0.0 + x * (0.0023736652059422065 + x * (0.03347612826241743 + x * (0.1953783487860643 + x * (0.5154120525543513 + x * (-0.01914390334056497 + x * (-4.466544539286106 + x * (-14.797912276547878 + x * (-24.925643150482347 + x * (-23.9195022162768 + x * (-12.283020824054201 + x * -2.5584373473990794))))))))));
    let s2 = -2.9474924474061867e-18 + x * (2.3955488790352614e-16 + x * (0.0023736652059327163 + x * (0.040735834578768094 + x * (0.31957073576676426 + x * (1.4860098202819654 + x * (4.4725413614962415 + x * (8.966132566838091 + x * (11.889614616763133 + x * (9.992207278431701 + x * (4.800985584544199 + x * 1.0))))))))));
    s1 / s2
  }
}

fn rateval48(x: num) -> num {
  if x == 0.0 {
    return 1.6662611269702147e-17;
  }
  let ax = abs(x);
  if ax <= 1.0 {
    let s1 = 1.6662611269702147e-17 + x * (0.4999999999999977 + x * (6.402709450190538 + x * (41.38333741550006 + x * (166.8033418545628 + x * (453.39964786925367 + x * (851.153712317697 + x * (1097.7065756728507 + x * (938.4312324784553 + x * (487.26800160465194 + x * 119.95344524233573)))))))));
    let s2 = 1.0 + x * (12.472085567047449 + x * (78.60931297532986 + x * (307.47024605031834 + x * (805.1406861011516 + x * (1439.1201976029215 + x * (1735.6105285756048 + x * (1348.3250071285634 + x * (607.2259858605709 + x * (119.95231785727705 + x * 0.00014016591835503607)))))))));
    s1 / s2
  } else {
    let x = 1.0 / x;
    let s1 = 119.95344524233573 + x * (487.26800160465194 + x * (938.4312324784553 + x * (1097.7065756728507 + x * (851.153712317697 + x * (453.39964786925367 + x * (166.8033418545628 + x * (41.38333741550006 + x * (6.402709450190538 + x * (0.4999999999999977 + x * 1.6662611269702147e-17)))))))));
    let s2 = 0.00014016591835503607 + x * (119.95231785727705 + x * (607.2259858605709 + x * (1348.3250071285634 + x * (1735.6105285756048 + x * (1439.1201976029215 + x * (805.1406861011516 + x * (307.47024605031834 + x * (78.60931297532986 + x * (12.472085567047449 + x * 1.0)))))))));
    s1 / s2
  }
}

fn rateval816(x: num) -> num {
  if x == 0.0 {
    return -1.848283152741466e-20;
  }
  let ax = abs(x);
  if ax <= 1.0 {
    let s1 = -1.848283152741466e-20 + x * (0.5 + x * (3.0253386524731334 + x * (13.599592751745737 + x * (35.31322242830879 + x * (67.16394245507142 + x * (83.5767733658514 + x * (71.07349121223571 + x * (35.86215156147256 + x * 8.721522316399835))))))));
    let s2 = 1.0 + x * (5.717343971612935 + x * (25.29340417962044 + x * (62.26197679674682 + x * (113.955048909239 + x * (130.80713832893898 + x * (102.42314690233765 + x * (44.04247728052452 + x * (8.89898032477904 + x * -0.029662733687204))))))));
    s1 / s2
  } else {
    let x = 1.0 / x;
    let s1 = 8.721522316399835 + x * (35.86215156147256 + x * (71.07349121223571 + x * (83.5767733658514 + x * (67.16394245507142 + x * (35.31322242830879 + x * (13.599592751745737 + x * (3.0253386524731334 + x * (0.5 + x * -1.848283152741466e-20))))))));
    let s2 = -0.029662733687204 + x * (8.89898032477904 + x * (44.04247728052452 + x * (102.42314690233765 + x * (130.80713832893898 + x * (113.955048909239 + x * (62.26197679674682 + x * (25.29340417962044 + x * (5.717343971612935 + x * 1.0))))))));
    s1 / s2
  }
}

fn rateval16INF(x: num) -> num {
  if x == 0.0 {
    return 0.0;
  }
  let ax = abs(x);
  if ax <= 1.0 {
    let s1 = 0.0 + x * (0.5 + x * (0.34562566988545623 + x * (9.628954993608422 + x * (3.5936085382439025 + x * (49.45959911843888 + x * (7.775192373218939 + x * (74.4536074488178 + x * (2.7520934039706906 + x * (23.92923597114717 + x * 0.0)))))))));
    let s2 = 1.0 + x * (0.3579180064375791 + x * (19.138603985070986 + x * (0.8743490814641436 + x * (98.65160974348555 + x * (-16.10519728333829 + x * (154.31686021625373 + x * (-40.2026880424379 + x * (60.167913667426475 + x * (-13.341484462225642 + x * 2.537956362006499)))))))));
    s1 / s2
  } else {
    let x = 1.0 / x;
    let s1 = 0.0 + x * (23.92923597114717 + x * (2.7520934039706906 + x * (74.4536074488178 + x * (7.775192373218939 + x * (49.45959911843888 + x * (3.5936085382439025 + x * (9.628954993608422 + x * (0.34562566988545623 + x * (0.5 + x * 0.0)))))))));
    let s2 = 2.537956362006499 + x * (-13.341484462225642 + x * (60.167913667426475 + x * (-40.2026880424379 + x * (154.31686021625373 + x * (-16.10519728333829 + x * (98.65160974348555 + x * (0.8743490814641436 + x * (19.138603985070986 + x * (0.3579180064375791 + x * 1.0)))))))));
    s1 / s2
  }
}

fn _trigamma_pos(x: num) -> num {
  let mut result = 0.0;
  let mut x = x;

  if x < 1.0 {
    result = 1.0 / (x * x);
    x += 1.0;
  }

  if x <= 2.0 {
    result += (2.0 + rateval12(x)) / (x * x);
  } else if x <= 4.0 {
    result += (3.558437347412109375 + rateval24(x)) / (x * x);
  } else if x <= 8.0 {
    result += (1.0 + rateval48(1.0 / x)) / x;
  } else if x <= 16.0 {
    result += (1.0 + rateval816(1.0 / x)) / x;
  } else {
    result += (1.0 + rateval16INF(1.0 / x)) / x;
  }

  result
}

fn trigamma(x: num) -> num {
  if x <= 0.0 {
    if floor(x) == x {
      // TODO: this is probably actually infinity
      return nan;
    }
    let s = sin(pi * x);
    -_trigamma_pos(1.0 - x) + pi * pi / (s * s)
  } else {
    _trigamma_pos(x)
  }
}
