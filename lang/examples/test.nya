rule a + 0.0 => a;
rule d/dx(a * b) => d/dx(a) * b + a * d/dx(b);

type f32 {
  source js { number }
  source glsl { float }
}

fn some_types() {
  a<b, 45, :sym, { c.q }, d<e<g>>>;
  source { 23 } :: f32;
}

fn hi(a: float, b: ((float))) -> r32 {
  if true {
    c32 { 2.0, 3.4 }
  } else if 2 + 3 < 4 * 5 | 7 - (8 == 9 % 4) && 2 != 3 && -!4 == ~8 {
    c(a).b(c).re + { 2 + 3 }
  } else if false {
    [2, 3, 89][78](78)<23><45>
  } else {
    7 + 8;
    for a, c in b, d {
      2 + 3
    }
  }
}

fn +(a: float, b: float) -> r32 usage 2 + 3 {
  return;
  return 23;

  break;
  break 'a;
  break 23;
  break 'a 23;

  continue;
  continue 'a;

  match 23 {
    a => 45,
    :hi => 67..45,
    // :arc { a, b } => 78,
  }
}

use "./world";
