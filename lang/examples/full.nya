// Multiple files
use "./bool"

// TypeScript and GLSL output
type(float) f32 {
  source js { number }
  source glsl { float }
}

// `let` specifies how to initialize a value of this type in `let` statements
let f32 {
  source js { 0 }
  source glsl { 0.0 }
}

type u32 {
  source js { number }
  source glsl { uint }
}

let u32 {
  source js { 0 }
  source glsl { 0.0 }
}

// Compound types
struct c32 = @vec2(f32);
struct viewport = @vec4(c32);

// Values received from JS and GLSL uniforms
uniform vp: viewport;

// Operator overloading
fn +(a: f32, b: f32): f32 {
  source { $(a) + $(b) }
}

// Operator overloading
fn -(a: f32, b: f32): f32 {
  source { $(a) - $(b) }
}

// Operator overloading
fn *(a: f32, b: f32): f32 {
  source { $(a) * $(b) }
}

// Operator overloading
fn /(a: f32, b: f32): f32 {
  source { $(a) / $(b) }
}

// GLSL textures
type(resource) img {
  source js { ImageData }
  source glsl { texture2D }
}

// Generic types
// `N: u32` means `N` is essentially a parameter which must be known at const
// time, but it may be inferred
struct point32<N: u32> = @vec<N>(f32);

// Comprehensions
fn +<N: u32>(pa: point32<N>, pb: point32<N>): point32<N> {
  // @packed in a GLSL context returns whether a type is represented as a single
  // scalar, vec, or mat; @packed[scalar/vec/mat] do the same but individually
  only glsl {
    // const if is guaranteed to be inlined
    const if @packed(point32<N>) {
      return source glsl { $(pa) + $(pb) }
    }
  }

  a + b for a, b = pa, pb
}

// Arrays with unknown (but capped) length
fn unique<N: u32>(a: f32[N]): f32[..N] {
  let ret: f32[N];
  let len: u32;

  'outer: for el = a {
    for i = 0..N {
      if i >= len {
        break
      }
      if ret[i] == el {
        break 'outer
      }
    }
    ret[len] = el
    len += 1
  }

  // `array @ len` syntax specifies an actual length for a bounded array
  ret @ len
}

// Symbolic computation can be specified
deriv +(a, b) {
  deriv(a) + deriv(b)
}

deriv *(a, b) {
  deriv(a) * b + a * deriv(b)
}

simplify +(a: f32, b) {
  if a == 0.0 {
    b
  } else {
    a + b
  }
}

simplify +(a, b: f32) {
  if b == 0.0 {
    a
  } else {
    a + b
  }
}

// Imports from JavaScript
type mathjscx {
  source js { import("mathjs").Complex | number }
  // no source glsl means this isn't accessible from GLSL
}

// Type coercion operator
// Implicit coercions are only allowed after declaring the coercion
fn ->(a: mathjscx): c32 {
  c32(
    source js { typeof $(a) == 'number' ? $(a) : $(a).re },
    source js { typeof $(a) == 'number' ? 0 : $(a).im }
  )
}

fn mathjscx(a: c32): mathjscx {
  using js { import { Complex } from "mathjs"; }
  source js { Complex($(a.re), $(a.im)) }
}

fn gamma(a: c32): c32 {
  only js {
    // 'using' declares imports which must go outside function scope
    using js { import { gamma } from "mathjs"; }
    // return type of 'source' is assumed to match fn return type; we explicitly
    // mark it as a mathjscx so automatic coercion works
    source { gamma($(a.mathjscx)) } :: mathjscx
  }
}

// Everything in a file is usable from other files; 'export' makes it usable
// from project nya, and provides any additional needed info.
export fn + "add two values";
export fn unique "returns a list with duplicates removed";

fn asinh(a: f32): f32 {
  // # is shorthand for getting to the math namespace in all respective
  // languages; this line is equivalent to Math.asinh in js and asinh in glsl
  #asinh(a)
}

// Functions may be exposed under other names
export fn asinh { arcsinh, arsinh, sinh^-1 } "inverse hyperbolic sine";

export type f32 {
  // Naming rules are implemented directly in source
  // They should be localized, but that will happen later
  name {
    :single => "real number",
    :plural => "real numbers",
    :indef  => "a real number",
  }
}

type Cv {
  source js { import("@/sheet/ui.cv").Cv }
}

export type c32 {
  name {
    :single => "complex number",
    :plural => "complex numbers",
    :indef  => "a complex number",
  }
}

// Unconstrained `T` means `T` is some type.
struct Point<T> {
  x: T,
  y: T,
}

struct Line<T> {
  p0: T,
  p1: T,
}

fn pt<T>(x: T, y: T): Point<T> {
  Point { x, y }
}

fn *(a: Point<f32>, b: f32): Point<f32> {
  only js { pt(a.x * b, a.y * b) }
  source glsl { $(a) * $(b) }
}

fn +(a: Point<f32>, b: Point<f32>): Point<f32> {
  only js { pt(a.x + b.x, a.y + b.y) }
  source glsl { $(a) + $(b) }
}

fn offset_dist(cv: Cv, a: Point<f32>, b: Point<f32>): Point<f32> {
  source js { $(cv).offsetDistance($(a), $(b)) }
}

// We'll leave out point types other than `c32` for simplicity.
fn glider(line: Line<Point<f32>>, at: f32): Point<f32> {
  only js { line.p0 * (1.0 - at) + line.p1 * at }
  source glsl { mix($(line.p0), $(line.p1), $(at)) }
}

struct UnglideResult {
  value: f32,
  precision: f32,
}

fn unglide(cv: Cv, { p0, p1 }: Line<c32>, { x, y }: c32): UnglideResult {
  let { x1, y1 } = p0;
  let { x2, y2 } = p1;

  let A = hypot(x1 - x, y1 - y);
  let B = hypot(x2 - x, y2 - y);
  let C = hypot(x1 - x2, y1 - y2);
  let a = ((A * A - B * B) / C + C) / 2.0;

  UnglideResult { a / C, cv.offset_dist(p0, p1) }
}

// Enums declare a subset of usable symbols; these are converted to integers at
// compile time
enum UnitCategory {
  :m,
  :s,
  :g,
  :K,
  :A,
  :mol,
  :cd,
}

struct BasicUnitData {
  base: UnitCategory,
  scale: f32,
  // `offset` has a default value, since it's usually not specified
  offset: f32 = 0.0,
}

// Enums can be defined as a map from keys to data; this allows `BasicUnit` to
// be called with a `BasicUnit` and output the corresponding entry. It's
// included b/c it's a pattern used often in project nya.
enum BasicUnit: BasicUnitData {
  :m => { :m, 1.0 },
  :s => { :s, 1.0 },
  :g => { :g, 1.0 },
  :K => { :K, 1.0 },
  :A => { :A, 1.0 },
  :mol => { :mol, 1.0 },
  :cd => { :cd, 1.0 },
  :min => { :s, 60.0 },
}

// Enums can also have data associated with their variants.
enum ComputedArc {
  // Written as `:invalid` in an expression
  :invalid,

  // Written as `:split_line { a, b }` in an expression
  :split_line { p0: Point<f32>, p1: Point<f32> },
  :segment { p0: Point<f32>, p1: Point<f32> },

  // Written as `:arc { a, b, c, d }` in an expression
  :arc { center: Point<f32>, radius: f32, start: f32, end: f32 },
}

fn nan(): f32 {
  0.0 / 0.0
}

fn inf(): f32 {
  1.0 / 0.0
}

fn arc_radius(arc: ComputedArc): f32 {
  match arc {
    :invalid => nan,
    :split_line | :segment => inf,
    :arc { radius } => radius,
  }
}
