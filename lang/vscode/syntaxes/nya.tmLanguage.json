{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "nya script",
  "patterns": [{ "include": "#root" }],
  "repository": {
    "root": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#number" },
        { "include": "#tagged-string" },
        { "include": "#source" },
        { "include": "#keywords" },
        { "include": "#identifier" },
        { "include": "#groups" },
        { "include": "#operators" },
        { "include": "#strings" }
      ]
    },
    "groups": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [{ "include": "#root" }]
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "patterns": [{ "include": "#root" }]
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [{ "include": "#root" }]
        }
      ]
    },
    "comments": {
      "name": "comment.line.double-slash",
      "begin": "//",
      "end": "[\r\n]"
    },
    "source": {
      "patterns": [
        {
          "begin": "\\b(source)\\s*(glsl)\\s*\\{",
          "end": "\\}",
          "patterns": [{ "include": "source.glsl" }],
          "beginCaptures": {
            "1": {
              "name": "keyword.operator"
            },
            "2": {
              "name": "entity.name"
            }
          }
        },
        {
          "begin": "\\b(source)\\s*(js)\\s*\\{",
          "end": "\\}",
          "patterns": [{ "include": "source.js" }],
          "beginCaptures": {
            "1": {
              "name": "keyword.operator"
            },
            "2": {
              "name": "entity.name"
            }
          }
        },
        {
          "begin": "\\b(using)\\s*(js)\\s*\\{",
          "end": "\\}",
          "patterns": [{ "include": "source.js" }],
          "beginCaptures": {
            "1": {
              "name": "keyword.operator"
            },
            "2": {
              "name": "entity.name"
            }
          }
        },
        {
          "begin": "\\b(source)\\s*\\{",
          "end": "\\}",
          "patterns": [{ "include": "source.js" }],
          "beginCaptures": {
            "1": {
              "name": "keyword.operator"
            }
          }
        },
        {
          "begin": "\\b(only)\\s*(\\w+)\\s*\\{",
          "end": "\\}",
          "patterns": [{ "include": "#root" }],
          "beginCaptures": {
            "1": {
              "name": "keyword.operator"
            },
            "2": {
              "name": "entity.name"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "entity.name",
          "begin": "\\b(fn)\\s*%\"",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.nya",
              "match": "\\\\."
            }
          ]
        },
        {
          "match": "\\b(fn)\\s+(\\w+|->|[@^#&|+\\-*\\/:=~\\\\!%]+|[<>]=?)",
          "captures": {
            "1": { "name": "keyword.control" },
            "2": { "name": "entity.name" }
          }
        },
        {
          "match": "\\b(d/d)([A-Za-z_]\\w*)\\b",
          "captures": {
            "1": { "name": "entity.name" },
            "2": { "name": "entity.name" }
          }
        },
        {
          "match": "\\b(struct|matrix)\\s+([A-Za-z_]\\w*(\\s*,\\s*[A-Za-z_]\\w*)*)\\b",
          "captures": {
            "1": { "name": "keyword.control" },
            "2": {
              "patterns": [{ "match": "[A-Za-z\\w*]", "name": "entity.name" }]
            }
          }
        },
        {
          "name": "keyword.control",
          "match": "\\b(rule|val|mut|match|enum|else|let|data|assert|opaque|resource|continue|for|if|break|in|return|usage|test|use|struct|matrix|type|fn|syntax|call|any|typeof|is|using|source|expose|as|const|package)\\b"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "name": "variable",
          "begin": "%\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.nya",
              "match": "\\\\."
            }
          ]
        },
        {
          "match": "(?<!:):[A-Za-z_]\\w*\\b",
          "name": "entity.name.tag"
        },
        {
          "match": "('[A-Za-z_]\\w*)\\s*(:(?![:A-Za-z_]))?",
          "captures": {
            "1": {
              "name": "entity.name.section"
            },
            "2": {
              "name": "keyword.operator"
            }
          }
        },
        {
          "match": "(let)\\s*\\b([A-Za-z_]\\w*)\\b(:)",
          "captures": {
            "1": {
              "name": "keyword.operator"
            },
            "3": {
              "name": "keyword.operator"
            }
          }
        },
        {
          "match": "\\b([A-Za-z_]\\w*)\\b(:(?![:A-Za-z]))",
          "captures": {
            "1": {
              "name": "entity.name"
            },
            "2": {
              "name": "keyword.operator"
            }
          }
        },
        {
          "match": "@\\b([A-Za-z_]\\w*)",
          "name": "support"
        },
        {
          "match": "(\\.)(\\d+)",
          "captures": {
            "2": {
              "name": "support.property-value"
            }
          }
        },
        {
          "match": "(%?\\b[A-Za-z_]\\w*\\b(?:\\^-1)?|->|[&%#|+\\-*\\/:=~\\\\!]+|[<>]=|[<>]\\s+)(\\()",
          "captures": {
            "1": {
              "name": "entity.name"
            },
            "2": {
              "name": "keyword.operator"
            }
          }
        },
        {
          "match": "(?<!->\\s*)(\\b[A-Za-z_]\\w*\\b(?:\\^-1)?)\\s*(\\{)",
          "captures": {
            "1": {
              "name": "entity.name"
            },
            "2": {
              "name": "keyword.operator"
            }
          }
        },
        {
          "include": "#types"
        },
        {
          "name": "entity.name",
          "match": "((?:%|\\b)[A-Z]\\w*)\\b(?:\\^-1)?"
        },
        {
          "name": "variable.name",
          "match": "((?:%|\\b)[A-Za-z_]\\w*)\\b(?:\\^-1)?"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "support",
          "match": "@(->|[@^#&|+\\-*\\/:=~\\\\!%]+|[<>]=?)"
        },
        {
          "name": "keyword.operator",
          "match": "->|[@^#&|+\\-*\\/:=~\\\\!%]+|[<>]=?"
        },
        {
          "name": "keyword.operator",
          "match": "\\.\\.\\.?"
        }
      ]
    },
    "tagged-string": {
      "begin": "(%?[A-Za-z_][A-Za-z_0-9]*)(#*)(\")",
      "end": "(\"\\2)",
      "beginCaptures": {
        "1": { "name": "support" },
        "2": { "name": "string.quoted.double" },
        "3": { "name": "string.quoted.double" }
      },
      "endCaptures": {
        "1": { "name": "string.quoted.double" }
      },
      "contentName": "string.quoted.double",
      "patterns": [
        {
          "begin": "\\$\\{",
          "end": "\\}",
          "captures": { "0": { "name": "keyword.operator" } },
          "patterns": [{ "include": "#root" }]
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.nya",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.nya",
          "match": "\\\\."
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "0x[\\da-f]+(?:\\.[\\da-f]+)?(?:p[+-]?\\d+)?|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?"
        },
        {
          "name": "constant.other",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "source-interp": {
      "begin": "\\$\\(",
      "beginCaptures": {
        "0": {
          "name": "keyword.other"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "keyword.other"
        }
      },
      "patterns": [{ "include": "#root" }]
    },
    "types": {
      "patterns": [
        {
          "match": "\\b(?:[A-Z]\\w*)\\b",
          "name": "entity.name.type.class.js"
        },
        {
          "match": "\\b(?:uint|num|str|complex|bool|img|viewport|mathjscx|rgb|rgba|oklab|color_space_conversion|latex)\\b",
          "name": "support"
        }
      ]
    }
  },
  "scopeName": "source.nya"
}
